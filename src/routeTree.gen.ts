/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootRouteImport } from './routes/_root/route'
import { Route as IndexImport } from './routes/index'
import { Route as RootNotAuthorizedImport } from './routes/_root/not-authorized'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as RootReferencesRouteImport } from './routes/_root/references/route'
import { Route as RootProfileRouteImport } from './routes/_root/profile/route'
import { Route as RootDashboardRouteImport } from './routes/_root/dashboard/route'
import { Route as RootConfigurationRouteImport } from './routes/_root/configuration/route'
import { Route as RootSuperadminRouteImport } from './routes/_root/_superadmin/route'
import { Route as RootAdminRouteImport } from './routes/_root/_admin/route'
import { Route as RootReferencesIndexImport } from './routes/_root/references/index'
import { Route as RootProfileIndexImport } from './routes/_root/profile/index'
import { Route as RootDashboardIndexImport } from './routes/_root/dashboard/index'
import { Route as RootConfigurationIndexImport } from './routes/_root/configuration/index'
import { Route as RootProfileEditProfileImport } from './routes/_root/profile/edit-profile'
import { Route as RootDashboardMapImport } from './routes/_root/dashboard/map'
import { Route as RootDashboardHistoricalImport } from './routes/_root/dashboard/historical'
import { Route as RootDashboardDataAnalysisImport } from './routes/_root/dashboard/data-analysis'
import { Route as RootSuperadminUsersRouteImport } from './routes/_root/_superadmin/users/route'
import { Route as RootSuperadminSystemRouteImport } from './routes/_root/_superadmin/system/route'
import { Route as RootSuperadminStationsRouteImport } from './routes/_root/_superadmin/stations/route'
import { Route as RootSuperadminOrganizationsRouteImport } from './routes/_root/_superadmin/organizations/route'
import { Route as RootAdminOrganizationRouteImport } from './routes/_root/_admin/organization/route'
import { Route as RootReferencesTerminologyUvindexImport } from './routes/_root/references/terminology/uvindex'
import { Route as RootReferencesTerminologyHeatindexImport } from './routes/_root/references/terminology/heatindex'
import { Route as RootSuperadminUsersIndexImport } from './routes/_root/_superadmin/users/index'
import { Route as RootSuperadminSystemIndexImport } from './routes/_root/_superadmin/system/index'
import { Route as RootSuperadminStationsIndexImport } from './routes/_root/_superadmin/stations/index'
import { Route as RootSuperadminOrganizationsIndexImport } from './routes/_root/_superadmin/organizations/index'
import { Route as RootAdminOrganizationIndexImport } from './routes/_root/_admin/organization/index'
import { Route as RootReferencesTerminologyWindspeedImport } from './routes/_root/references/terminology/windspeed'
import { Route as RootReferencesTerminologyRainfallImport } from './routes/_root/references/terminology/rainfall'
import { Route as RootSuperadminUsersCreateImport } from './routes/_root/_superadmin/users/create'
import { Route as RootSuperadminStationsRootCertificateImport } from './routes/_root/_superadmin/stations/root-certificate'
import { Route as RootSuperadminStationsCreateImport } from './routes/_root/_superadmin/stations/create'
import { Route as RootSuperadminOrganizationsCreateImport } from './routes/_root/_superadmin/organizations/create'
import { Route as RootSuperadminStationsDeviceCertificationIdImport } from './routes/_root/_superadmin/stations/device-certification/$id'

// Create/Update Routes

const RootRouteRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RootNotAuthorizedRoute = RootNotAuthorizedImport.update({
  id: '/not-authorized',
  path: '/not-authorized',
  getParentRoute: () => RootRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const RootReferencesRouteRoute = RootReferencesRouteImport.update({
  id: '/references',
  path: '/references',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootProfileRouteRoute = RootProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootDashboardRouteRoute = RootDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootConfigurationRouteRoute = RootConfigurationRouteImport.update({
  id: '/configuration',
  path: '/configuration',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootSuperadminRouteRoute = RootSuperadminRouteImport.update({
  id: '/_superadmin',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootAdminRouteRoute = RootAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootReferencesIndexRoute = RootReferencesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootReferencesRouteRoute,
} as any)

const RootProfileIndexRoute = RootProfileIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootProfileRouteRoute,
} as any)

const RootDashboardIndexRoute = RootDashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootDashboardRouteRoute,
} as any)

const RootConfigurationIndexRoute = RootConfigurationIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootConfigurationRouteRoute,
} as any)

const RootProfileEditProfileRoute = RootProfileEditProfileImport.update({
  id: '/edit-profile',
  path: '/edit-profile',
  getParentRoute: () => RootProfileRouteRoute,
} as any)

const RootDashboardMapRoute = RootDashboardMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => RootDashboardRouteRoute,
} as any)

const RootDashboardHistoricalRoute = RootDashboardHistoricalImport.update({
  id: '/historical',
  path: '/historical',
  getParentRoute: () => RootDashboardRouteRoute,
} as any)

const RootDashboardDataAnalysisRoute = RootDashboardDataAnalysisImport.update({
  id: '/data-analysis',
  path: '/data-analysis',
  getParentRoute: () => RootDashboardRouteRoute,
} as any)

const RootSuperadminUsersRouteRoute = RootSuperadminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => RootSuperadminRouteRoute,
} as any)

const RootSuperadminSystemRouteRoute = RootSuperadminSystemRouteImport.update({
  id: '/system',
  path: '/system',
  getParentRoute: () => RootSuperadminRouteRoute,
} as any)

const RootSuperadminStationsRouteRoute =
  RootSuperadminStationsRouteImport.update({
    id: '/stations',
    path: '/stations',
    getParentRoute: () => RootSuperadminRouteRoute,
  } as any)

const RootSuperadminOrganizationsRouteRoute =
  RootSuperadminOrganizationsRouteImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => RootSuperadminRouteRoute,
  } as any)

const RootAdminOrganizationRouteRoute = RootAdminOrganizationRouteImport.update(
  {
    id: '/organization',
    path: '/organization',
    getParentRoute: () => RootAdminRouteRoute,
  } as any,
)

const RootReferencesTerminologyUvindexRoute =
  RootReferencesTerminologyUvindexImport.update({
    id: '/terminology/uvindex',
    path: '/terminology/uvindex',
    getParentRoute: () => RootReferencesRouteRoute,
  } as any)

const RootReferencesTerminologyHeatindexRoute =
  RootReferencesTerminologyHeatindexImport.update({
    id: '/terminology/heatindex',
    path: '/terminology/heatindex',
    getParentRoute: () => RootReferencesRouteRoute,
  } as any)

const RootSuperadminUsersIndexRoute = RootSuperadminUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootSuperadminUsersRouteRoute,
} as any)

const RootSuperadminSystemIndexRoute = RootSuperadminSystemIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootSuperadminSystemRouteRoute,
} as any)

const RootSuperadminStationsIndexRoute =
  RootSuperadminStationsIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => RootSuperadminStationsRouteRoute,
  } as any)

const RootSuperadminOrganizationsIndexRoute =
  RootSuperadminOrganizationsIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => RootSuperadminOrganizationsRouteRoute,
  } as any)

const RootAdminOrganizationIndexRoute = RootAdminOrganizationIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => RootAdminOrganizationRouteRoute,
  } as any,
)

const RootReferencesTerminologyWindspeedRoute =
  RootReferencesTerminologyWindspeedImport.update({
    id: '/terminology/windspeed',
    path: '/terminology/windspeed',
    getParentRoute: () => RootReferencesRouteRoute,
  } as any)

const RootReferencesTerminologyRainfallRoute =
  RootReferencesTerminologyRainfallImport.update({
    id: '/terminology/rainfall',
    path: '/terminology/rainfall',
    getParentRoute: () => RootReferencesRouteRoute,
  } as any)

const RootSuperadminUsersCreateRoute = RootSuperadminUsersCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => RootSuperadminUsersRouteRoute,
} as any)

const RootSuperadminStationsRootCertificateRoute =
  RootSuperadminStationsRootCertificateImport.update({
    id: '/root-certificate',
    path: '/root-certificate',
    getParentRoute: () => RootSuperadminStationsRouteRoute,
  } as any)

const RootSuperadminStationsCreateRoute =
  RootSuperadminStationsCreateImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => RootSuperadminStationsRouteRoute,
  } as any)

const RootSuperadminOrganizationsCreateRoute =
  RootSuperadminOrganizationsCreateImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => RootSuperadminOrganizationsRouteRoute,
  } as any)

const RootSuperadminStationsDeviceCertificationIdRoute =
  RootSuperadminStationsDeviceCertificationIdImport.update({
    id: '/device-certification/$id',
    path: '/device-certification/$id',
    getParentRoute: () => RootSuperadminStationsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/_root/_admin': {
      id: '/_root/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootAdminRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/_superadmin': {
      id: '/_root/_superadmin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootSuperadminRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/configuration': {
      id: '/_root/configuration'
      path: '/configuration'
      fullPath: '/configuration'
      preLoaderRoute: typeof RootConfigurationRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/dashboard': {
      id: '/_root/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof RootDashboardRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/profile': {
      id: '/_root/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof RootProfileRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/references': {
      id: '/_root/references'
      path: '/references'
      fullPath: '/references'
      preLoaderRoute: typeof RootReferencesRouteImport
      parentRoute: typeof RootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_root/not-authorized': {
      id: '/_root/not-authorized'
      path: '/not-authorized'
      fullPath: '/not-authorized'
      preLoaderRoute: typeof RootNotAuthorizedImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/_admin/organization': {
      id: '/_root/_admin/organization'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof RootAdminOrganizationRouteImport
      parentRoute: typeof RootAdminRouteImport
    }
    '/_root/_superadmin/organizations': {
      id: '/_root/_superadmin/organizations'
      path: '/organizations'
      fullPath: '/organizations'
      preLoaderRoute: typeof RootSuperadminOrganizationsRouteImport
      parentRoute: typeof RootSuperadminRouteImport
    }
    '/_root/_superadmin/stations': {
      id: '/_root/_superadmin/stations'
      path: '/stations'
      fullPath: '/stations'
      preLoaderRoute: typeof RootSuperadminStationsRouteImport
      parentRoute: typeof RootSuperadminRouteImport
    }
    '/_root/_superadmin/system': {
      id: '/_root/_superadmin/system'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof RootSuperadminSystemRouteImport
      parentRoute: typeof RootSuperadminRouteImport
    }
    '/_root/_superadmin/users': {
      id: '/_root/_superadmin/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof RootSuperadminUsersRouteImport
      parentRoute: typeof RootSuperadminRouteImport
    }
    '/_root/dashboard/data-analysis': {
      id: '/_root/dashboard/data-analysis'
      path: '/data-analysis'
      fullPath: '/dashboard/data-analysis'
      preLoaderRoute: typeof RootDashboardDataAnalysisImport
      parentRoute: typeof RootDashboardRouteImport
    }
    '/_root/dashboard/historical': {
      id: '/_root/dashboard/historical'
      path: '/historical'
      fullPath: '/dashboard/historical'
      preLoaderRoute: typeof RootDashboardHistoricalImport
      parentRoute: typeof RootDashboardRouteImport
    }
    '/_root/dashboard/map': {
      id: '/_root/dashboard/map'
      path: '/map'
      fullPath: '/dashboard/map'
      preLoaderRoute: typeof RootDashboardMapImport
      parentRoute: typeof RootDashboardRouteImport
    }
    '/_root/profile/edit-profile': {
      id: '/_root/profile/edit-profile'
      path: '/edit-profile'
      fullPath: '/profile/edit-profile'
      preLoaderRoute: typeof RootProfileEditProfileImport
      parentRoute: typeof RootProfileRouteImport
    }
    '/_root/configuration/': {
      id: '/_root/configuration/'
      path: '/'
      fullPath: '/configuration/'
      preLoaderRoute: typeof RootConfigurationIndexImport
      parentRoute: typeof RootConfigurationRouteImport
    }
    '/_root/dashboard/': {
      id: '/_root/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof RootDashboardIndexImport
      parentRoute: typeof RootDashboardRouteImport
    }
    '/_root/profile/': {
      id: '/_root/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof RootProfileIndexImport
      parentRoute: typeof RootProfileRouteImport
    }
    '/_root/references/': {
      id: '/_root/references/'
      path: '/'
      fullPath: '/references/'
      preLoaderRoute: typeof RootReferencesIndexImport
      parentRoute: typeof RootReferencesRouteImport
    }
    '/_root/_superadmin/organizations/create': {
      id: '/_root/_superadmin/organizations/create'
      path: '/create'
      fullPath: '/organizations/create'
      preLoaderRoute: typeof RootSuperadminOrganizationsCreateImport
      parentRoute: typeof RootSuperadminOrganizationsRouteImport
    }
    '/_root/_superadmin/stations/create': {
      id: '/_root/_superadmin/stations/create'
      path: '/create'
      fullPath: '/stations/create'
      preLoaderRoute: typeof RootSuperadminStationsCreateImport
      parentRoute: typeof RootSuperadminStationsRouteImport
    }
    '/_root/_superadmin/stations/root-certificate': {
      id: '/_root/_superadmin/stations/root-certificate'
      path: '/root-certificate'
      fullPath: '/stations/root-certificate'
      preLoaderRoute: typeof RootSuperadminStationsRootCertificateImport
      parentRoute: typeof RootSuperadminStationsRouteImport
    }
    '/_root/_superadmin/users/create': {
      id: '/_root/_superadmin/users/create'
      path: '/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof RootSuperadminUsersCreateImport
      parentRoute: typeof RootSuperadminUsersRouteImport
    }
    '/_root/references/terminology/heatindex': {
      id: '/_root/references/terminology/heatindex'
      path: '/terminology/heatindex'
      fullPath: '/references/terminology/heatindex'
      preLoaderRoute: typeof RootReferencesTerminologyHeatindexImport
      parentRoute: typeof RootReferencesRouteImport
    }
    '/_root/references/terminology/rainfall': {
      id: '/_root/references/terminology/rainfall'
      path: '/terminology/rainfall'
      fullPath: '/references/terminology/rainfall'
      preLoaderRoute: typeof RootReferencesTerminologyRainfallImport
      parentRoute: typeof RootReferencesRouteImport
    }
    '/_root/references/terminology/uvindex': {
      id: '/_root/references/terminology/uvindex'
      path: '/terminology/uvindex'
      fullPath: '/references/terminology/uvindex'
      preLoaderRoute: typeof RootReferencesTerminologyUvindexImport
      parentRoute: typeof RootReferencesRouteImport
    }
    '/_root/references/terminology/windspeed': {
      id: '/_root/references/terminology/windspeed'
      path: '/terminology/windspeed'
      fullPath: '/references/terminology/windspeed'
      preLoaderRoute: typeof RootReferencesTerminologyWindspeedImport
      parentRoute: typeof RootReferencesRouteImport
    }
    '/_root/_admin/organization/': {
      id: '/_root/_admin/organization/'
      path: '/'
      fullPath: '/organization/'
      preLoaderRoute: typeof RootAdminOrganizationIndexImport
      parentRoute: typeof RootAdminOrganizationRouteImport
    }
    '/_root/_superadmin/organizations/': {
      id: '/_root/_superadmin/organizations/'
      path: '/'
      fullPath: '/organizations/'
      preLoaderRoute: typeof RootSuperadminOrganizationsIndexImport
      parentRoute: typeof RootSuperadminOrganizationsRouteImport
    }
    '/_root/_superadmin/stations/': {
      id: '/_root/_superadmin/stations/'
      path: '/'
      fullPath: '/stations/'
      preLoaderRoute: typeof RootSuperadminStationsIndexImport
      parentRoute: typeof RootSuperadminStationsRouteImport
    }
    '/_root/_superadmin/system/': {
      id: '/_root/_superadmin/system/'
      path: '/'
      fullPath: '/system/'
      preLoaderRoute: typeof RootSuperadminSystemIndexImport
      parentRoute: typeof RootSuperadminSystemRouteImport
    }
    '/_root/_superadmin/users/': {
      id: '/_root/_superadmin/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof RootSuperadminUsersIndexImport
      parentRoute: typeof RootSuperadminUsersRouteImport
    }
    '/_root/_superadmin/stations/device-certification/$id': {
      id: '/_root/_superadmin/stations/device-certification/$id'
      path: '/device-certification/$id'
      fullPath: '/stations/device-certification/$id'
      preLoaderRoute: typeof RootSuperadminStationsDeviceCertificationIdImport
      parentRoute: typeof RootSuperadminStationsRouteImport
    }
  }
}

// Create and export the route tree

interface RootAdminOrganizationRouteRouteChildren {
  RootAdminOrganizationIndexRoute: typeof RootAdminOrganizationIndexRoute
}

const RootAdminOrganizationRouteRouteChildren: RootAdminOrganizationRouteRouteChildren =
  {
    RootAdminOrganizationIndexRoute: RootAdminOrganizationIndexRoute,
  }

const RootAdminOrganizationRouteRouteWithChildren =
  RootAdminOrganizationRouteRoute._addFileChildren(
    RootAdminOrganizationRouteRouteChildren,
  )

interface RootAdminRouteRouteChildren {
  RootAdminOrganizationRouteRoute: typeof RootAdminOrganizationRouteRouteWithChildren
}

const RootAdminRouteRouteChildren: RootAdminRouteRouteChildren = {
  RootAdminOrganizationRouteRoute: RootAdminOrganizationRouteRouteWithChildren,
}

const RootAdminRouteRouteWithChildren = RootAdminRouteRoute._addFileChildren(
  RootAdminRouteRouteChildren,
)

interface RootSuperadminOrganizationsRouteRouteChildren {
  RootSuperadminOrganizationsCreateRoute: typeof RootSuperadminOrganizationsCreateRoute
  RootSuperadminOrganizationsIndexRoute: typeof RootSuperadminOrganizationsIndexRoute
}

const RootSuperadminOrganizationsRouteRouteChildren: RootSuperadminOrganizationsRouteRouteChildren =
  {
    RootSuperadminOrganizationsCreateRoute:
      RootSuperadminOrganizationsCreateRoute,
    RootSuperadminOrganizationsIndexRoute:
      RootSuperadminOrganizationsIndexRoute,
  }

const RootSuperadminOrganizationsRouteRouteWithChildren =
  RootSuperadminOrganizationsRouteRoute._addFileChildren(
    RootSuperadminOrganizationsRouteRouteChildren,
  )

interface RootSuperadminStationsRouteRouteChildren {
  RootSuperadminStationsCreateRoute: typeof RootSuperadminStationsCreateRoute
  RootSuperadminStationsRootCertificateRoute: typeof RootSuperadminStationsRootCertificateRoute
  RootSuperadminStationsIndexRoute: typeof RootSuperadminStationsIndexRoute
  RootSuperadminStationsDeviceCertificationIdRoute: typeof RootSuperadminStationsDeviceCertificationIdRoute
}

const RootSuperadminStationsRouteRouteChildren: RootSuperadminStationsRouteRouteChildren =
  {
    RootSuperadminStationsCreateRoute: RootSuperadminStationsCreateRoute,
    RootSuperadminStationsRootCertificateRoute:
      RootSuperadminStationsRootCertificateRoute,
    RootSuperadminStationsIndexRoute: RootSuperadminStationsIndexRoute,
    RootSuperadminStationsDeviceCertificationIdRoute:
      RootSuperadminStationsDeviceCertificationIdRoute,
  }

const RootSuperadminStationsRouteRouteWithChildren =
  RootSuperadminStationsRouteRoute._addFileChildren(
    RootSuperadminStationsRouteRouteChildren,
  )

interface RootSuperadminSystemRouteRouteChildren {
  RootSuperadminSystemIndexRoute: typeof RootSuperadminSystemIndexRoute
}

const RootSuperadminSystemRouteRouteChildren: RootSuperadminSystemRouteRouteChildren =
  {
    RootSuperadminSystemIndexRoute: RootSuperadminSystemIndexRoute,
  }

const RootSuperadminSystemRouteRouteWithChildren =
  RootSuperadminSystemRouteRoute._addFileChildren(
    RootSuperadminSystemRouteRouteChildren,
  )

interface RootSuperadminUsersRouteRouteChildren {
  RootSuperadminUsersCreateRoute: typeof RootSuperadminUsersCreateRoute
  RootSuperadminUsersIndexRoute: typeof RootSuperadminUsersIndexRoute
}

const RootSuperadminUsersRouteRouteChildren: RootSuperadminUsersRouteRouteChildren =
  {
    RootSuperadminUsersCreateRoute: RootSuperadminUsersCreateRoute,
    RootSuperadminUsersIndexRoute: RootSuperadminUsersIndexRoute,
  }

const RootSuperadminUsersRouteRouteWithChildren =
  RootSuperadminUsersRouteRoute._addFileChildren(
    RootSuperadminUsersRouteRouteChildren,
  )

interface RootSuperadminRouteRouteChildren {
  RootSuperadminOrganizationsRouteRoute: typeof RootSuperadminOrganizationsRouteRouteWithChildren
  RootSuperadminStationsRouteRoute: typeof RootSuperadminStationsRouteRouteWithChildren
  RootSuperadminSystemRouteRoute: typeof RootSuperadminSystemRouteRouteWithChildren
  RootSuperadminUsersRouteRoute: typeof RootSuperadminUsersRouteRouteWithChildren
}

const RootSuperadminRouteRouteChildren: RootSuperadminRouteRouteChildren = {
  RootSuperadminOrganizationsRouteRoute:
    RootSuperadminOrganizationsRouteRouteWithChildren,
  RootSuperadminStationsRouteRoute:
    RootSuperadminStationsRouteRouteWithChildren,
  RootSuperadminSystemRouteRoute: RootSuperadminSystemRouteRouteWithChildren,
  RootSuperadminUsersRouteRoute: RootSuperadminUsersRouteRouteWithChildren,
}

const RootSuperadminRouteRouteWithChildren =
  RootSuperadminRouteRoute._addFileChildren(RootSuperadminRouteRouteChildren)

interface RootConfigurationRouteRouteChildren {
  RootConfigurationIndexRoute: typeof RootConfigurationIndexRoute
}

const RootConfigurationRouteRouteChildren: RootConfigurationRouteRouteChildren =
  {
    RootConfigurationIndexRoute: RootConfigurationIndexRoute,
  }

const RootConfigurationRouteRouteWithChildren =
  RootConfigurationRouteRoute._addFileChildren(
    RootConfigurationRouteRouteChildren,
  )

interface RootDashboardRouteRouteChildren {
  RootDashboardDataAnalysisRoute: typeof RootDashboardDataAnalysisRoute
  RootDashboardHistoricalRoute: typeof RootDashboardHistoricalRoute
  RootDashboardMapRoute: typeof RootDashboardMapRoute
  RootDashboardIndexRoute: typeof RootDashboardIndexRoute
}

const RootDashboardRouteRouteChildren: RootDashboardRouteRouteChildren = {
  RootDashboardDataAnalysisRoute: RootDashboardDataAnalysisRoute,
  RootDashboardHistoricalRoute: RootDashboardHistoricalRoute,
  RootDashboardMapRoute: RootDashboardMapRoute,
  RootDashboardIndexRoute: RootDashboardIndexRoute,
}

const RootDashboardRouteRouteWithChildren =
  RootDashboardRouteRoute._addFileChildren(RootDashboardRouteRouteChildren)

interface RootProfileRouteRouteChildren {
  RootProfileEditProfileRoute: typeof RootProfileEditProfileRoute
  RootProfileIndexRoute: typeof RootProfileIndexRoute
}

const RootProfileRouteRouteChildren: RootProfileRouteRouteChildren = {
  RootProfileEditProfileRoute: RootProfileEditProfileRoute,
  RootProfileIndexRoute: RootProfileIndexRoute,
}

const RootProfileRouteRouteWithChildren =
  RootProfileRouteRoute._addFileChildren(RootProfileRouteRouteChildren)

interface RootReferencesRouteRouteChildren {
  RootReferencesIndexRoute: typeof RootReferencesIndexRoute
  RootReferencesTerminologyHeatindexRoute: typeof RootReferencesTerminologyHeatindexRoute
  RootReferencesTerminologyRainfallRoute: typeof RootReferencesTerminologyRainfallRoute
  RootReferencesTerminologyUvindexRoute: typeof RootReferencesTerminologyUvindexRoute
  RootReferencesTerminologyWindspeedRoute: typeof RootReferencesTerminologyWindspeedRoute
}

const RootReferencesRouteRouteChildren: RootReferencesRouteRouteChildren = {
  RootReferencesIndexRoute: RootReferencesIndexRoute,
  RootReferencesTerminologyHeatindexRoute:
    RootReferencesTerminologyHeatindexRoute,
  RootReferencesTerminologyRainfallRoute:
    RootReferencesTerminologyRainfallRoute,
  RootReferencesTerminologyUvindexRoute: RootReferencesTerminologyUvindexRoute,
  RootReferencesTerminologyWindspeedRoute:
    RootReferencesTerminologyWindspeedRoute,
}

const RootReferencesRouteRouteWithChildren =
  RootReferencesRouteRoute._addFileChildren(RootReferencesRouteRouteChildren)

interface RootRouteRouteChildren {
  RootAdminRouteRoute: typeof RootAdminRouteRouteWithChildren
  RootSuperadminRouteRoute: typeof RootSuperadminRouteRouteWithChildren
  RootConfigurationRouteRoute: typeof RootConfigurationRouteRouteWithChildren
  RootDashboardRouteRoute: typeof RootDashboardRouteRouteWithChildren
  RootProfileRouteRoute: typeof RootProfileRouteRouteWithChildren
  RootReferencesRouteRoute: typeof RootReferencesRouteRouteWithChildren
  RootNotAuthorizedRoute: typeof RootNotAuthorizedRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootAdminRouteRoute: RootAdminRouteRouteWithChildren,
  RootSuperadminRouteRoute: RootSuperadminRouteRouteWithChildren,
  RootConfigurationRouteRoute: RootConfigurationRouteRouteWithChildren,
  RootDashboardRouteRoute: RootDashboardRouteRouteWithChildren,
  RootProfileRouteRoute: RootProfileRouteRouteWithChildren,
  RootReferencesRouteRoute: RootReferencesRouteRouteWithChildren,
  RootNotAuthorizedRoute: RootNotAuthorizedRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof RootSuperadminRouteRouteWithChildren
  '/configuration': typeof RootConfigurationRouteRouteWithChildren
  '/dashboard': typeof RootDashboardRouteRouteWithChildren
  '/profile': typeof RootProfileRouteRouteWithChildren
  '/references': typeof RootReferencesRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/not-authorized': typeof RootNotAuthorizedRoute
  '/organization': typeof RootAdminOrganizationRouteRouteWithChildren
  '/organizations': typeof RootSuperadminOrganizationsRouteRouteWithChildren
  '/stations': typeof RootSuperadminStationsRouteRouteWithChildren
  '/system': typeof RootSuperadminSystemRouteRouteWithChildren
  '/users': typeof RootSuperadminUsersRouteRouteWithChildren
  '/dashboard/data-analysis': typeof RootDashboardDataAnalysisRoute
  '/dashboard/historical': typeof RootDashboardHistoricalRoute
  '/dashboard/map': typeof RootDashboardMapRoute
  '/profile/edit-profile': typeof RootProfileEditProfileRoute
  '/configuration/': typeof RootConfigurationIndexRoute
  '/dashboard/': typeof RootDashboardIndexRoute
  '/profile/': typeof RootProfileIndexRoute
  '/references/': typeof RootReferencesIndexRoute
  '/organizations/create': typeof RootSuperadminOrganizationsCreateRoute
  '/stations/create': typeof RootSuperadminStationsCreateRoute
  '/stations/root-certificate': typeof RootSuperadminStationsRootCertificateRoute
  '/users/create': typeof RootSuperadminUsersCreateRoute
  '/references/terminology/heatindex': typeof RootReferencesTerminologyHeatindexRoute
  '/references/terminology/rainfall': typeof RootReferencesTerminologyRainfallRoute
  '/references/terminology/uvindex': typeof RootReferencesTerminologyUvindexRoute
  '/references/terminology/windspeed': typeof RootReferencesTerminologyWindspeedRoute
  '/organization/': typeof RootAdminOrganizationIndexRoute
  '/organizations/': typeof RootSuperadminOrganizationsIndexRoute
  '/stations/': typeof RootSuperadminStationsIndexRoute
  '/system/': typeof RootSuperadminSystemIndexRoute
  '/users/': typeof RootSuperadminUsersIndexRoute
  '/stations/device-certification/$id': typeof RootSuperadminStationsDeviceCertificationIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof RootSuperadminRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/not-authorized': typeof RootNotAuthorizedRoute
  '/dashboard/data-analysis': typeof RootDashboardDataAnalysisRoute
  '/dashboard/historical': typeof RootDashboardHistoricalRoute
  '/dashboard/map': typeof RootDashboardMapRoute
  '/profile/edit-profile': typeof RootProfileEditProfileRoute
  '/configuration': typeof RootConfigurationIndexRoute
  '/dashboard': typeof RootDashboardIndexRoute
  '/profile': typeof RootProfileIndexRoute
  '/references': typeof RootReferencesIndexRoute
  '/organizations/create': typeof RootSuperadminOrganizationsCreateRoute
  '/stations/create': typeof RootSuperadminStationsCreateRoute
  '/stations/root-certificate': typeof RootSuperadminStationsRootCertificateRoute
  '/users/create': typeof RootSuperadminUsersCreateRoute
  '/references/terminology/heatindex': typeof RootReferencesTerminologyHeatindexRoute
  '/references/terminology/rainfall': typeof RootReferencesTerminologyRainfallRoute
  '/references/terminology/uvindex': typeof RootReferencesTerminologyUvindexRoute
  '/references/terminology/windspeed': typeof RootReferencesTerminologyWindspeedRoute
  '/organization': typeof RootAdminOrganizationIndexRoute
  '/organizations': typeof RootSuperadminOrganizationsIndexRoute
  '/stations': typeof RootSuperadminStationsIndexRoute
  '/system': typeof RootSuperadminSystemIndexRoute
  '/users': typeof RootSuperadminUsersIndexRoute
  '/stations/device-certification/$id': typeof RootSuperadminStationsDeviceCertificationIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_root': typeof RootRouteRouteWithChildren
  '/_root/_admin': typeof RootAdminRouteRouteWithChildren
  '/_root/_superadmin': typeof RootSuperadminRouteRouteWithChildren
  '/_root/configuration': typeof RootConfigurationRouteRouteWithChildren
  '/_root/dashboard': typeof RootDashboardRouteRouteWithChildren
  '/_root/profile': typeof RootProfileRouteRouteWithChildren
  '/_root/references': typeof RootReferencesRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_root/not-authorized': typeof RootNotAuthorizedRoute
  '/_root/_admin/organization': typeof RootAdminOrganizationRouteRouteWithChildren
  '/_root/_superadmin/organizations': typeof RootSuperadminOrganizationsRouteRouteWithChildren
  '/_root/_superadmin/stations': typeof RootSuperadminStationsRouteRouteWithChildren
  '/_root/_superadmin/system': typeof RootSuperadminSystemRouteRouteWithChildren
  '/_root/_superadmin/users': typeof RootSuperadminUsersRouteRouteWithChildren
  '/_root/dashboard/data-analysis': typeof RootDashboardDataAnalysisRoute
  '/_root/dashboard/historical': typeof RootDashboardHistoricalRoute
  '/_root/dashboard/map': typeof RootDashboardMapRoute
  '/_root/profile/edit-profile': typeof RootProfileEditProfileRoute
  '/_root/configuration/': typeof RootConfigurationIndexRoute
  '/_root/dashboard/': typeof RootDashboardIndexRoute
  '/_root/profile/': typeof RootProfileIndexRoute
  '/_root/references/': typeof RootReferencesIndexRoute
  '/_root/_superadmin/organizations/create': typeof RootSuperadminOrganizationsCreateRoute
  '/_root/_superadmin/stations/create': typeof RootSuperadminStationsCreateRoute
  '/_root/_superadmin/stations/root-certificate': typeof RootSuperadminStationsRootCertificateRoute
  '/_root/_superadmin/users/create': typeof RootSuperadminUsersCreateRoute
  '/_root/references/terminology/heatindex': typeof RootReferencesTerminologyHeatindexRoute
  '/_root/references/terminology/rainfall': typeof RootReferencesTerminologyRainfallRoute
  '/_root/references/terminology/uvindex': typeof RootReferencesTerminologyUvindexRoute
  '/_root/references/terminology/windspeed': typeof RootReferencesTerminologyWindspeedRoute
  '/_root/_admin/organization/': typeof RootAdminOrganizationIndexRoute
  '/_root/_superadmin/organizations/': typeof RootSuperadminOrganizationsIndexRoute
  '/_root/_superadmin/stations/': typeof RootSuperadminStationsIndexRoute
  '/_root/_superadmin/system/': typeof RootSuperadminSystemIndexRoute
  '/_root/_superadmin/users/': typeof RootSuperadminUsersIndexRoute
  '/_root/_superadmin/stations/device-certification/$id': typeof RootSuperadminStationsDeviceCertificationIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/configuration'
    | '/dashboard'
    | '/profile'
    | '/references'
    | '/login'
    | '/not-authorized'
    | '/organization'
    | '/organizations'
    | '/stations'
    | '/system'
    | '/users'
    | '/dashboard/data-analysis'
    | '/dashboard/historical'
    | '/dashboard/map'
    | '/profile/edit-profile'
    | '/configuration/'
    | '/dashboard/'
    | '/profile/'
    | '/references/'
    | '/organizations/create'
    | '/stations/create'
    | '/stations/root-certificate'
    | '/users/create'
    | '/references/terminology/heatindex'
    | '/references/terminology/rainfall'
    | '/references/terminology/uvindex'
    | '/references/terminology/windspeed'
    | '/organization/'
    | '/organizations/'
    | '/stations/'
    | '/system/'
    | '/users/'
    | '/stations/device-certification/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/not-authorized'
    | '/dashboard/data-analysis'
    | '/dashboard/historical'
    | '/dashboard/map'
    | '/profile/edit-profile'
    | '/configuration'
    | '/dashboard'
    | '/profile'
    | '/references'
    | '/organizations/create'
    | '/stations/create'
    | '/stations/root-certificate'
    | '/users/create'
    | '/references/terminology/heatindex'
    | '/references/terminology/rainfall'
    | '/references/terminology/uvindex'
    | '/references/terminology/windspeed'
    | '/organization'
    | '/organizations'
    | '/stations'
    | '/system'
    | '/users'
    | '/stations/device-certification/$id'
  id:
    | '__root__'
    | '/'
    | '/_root'
    | '/_root/_admin'
    | '/_root/_superadmin'
    | '/_root/configuration'
    | '/_root/dashboard'
    | '/_root/profile'
    | '/_root/references'
    | '/_auth/login'
    | '/_root/not-authorized'
    | '/_root/_admin/organization'
    | '/_root/_superadmin/organizations'
    | '/_root/_superadmin/stations'
    | '/_root/_superadmin/system'
    | '/_root/_superadmin/users'
    | '/_root/dashboard/data-analysis'
    | '/_root/dashboard/historical'
    | '/_root/dashboard/map'
    | '/_root/profile/edit-profile'
    | '/_root/configuration/'
    | '/_root/dashboard/'
    | '/_root/profile/'
    | '/_root/references/'
    | '/_root/_superadmin/organizations/create'
    | '/_root/_superadmin/stations/create'
    | '/_root/_superadmin/stations/root-certificate'
    | '/_root/_superadmin/users/create'
    | '/_root/references/terminology/heatindex'
    | '/_root/references/terminology/rainfall'
    | '/_root/references/terminology/uvindex'
    | '/_root/references/terminology/windspeed'
    | '/_root/_admin/organization/'
    | '/_root/_superadmin/organizations/'
    | '/_root/_superadmin/stations/'
    | '/_root/_superadmin/system/'
    | '/_root/_superadmin/users/'
    | '/_root/_superadmin/stations/device-certification/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RootRouteRoute: typeof RootRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RootRouteRoute: RootRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_root",
        "/_auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_root": {
      "filePath": "_root/route.tsx",
      "children": [
        "/_root/_admin",
        "/_root/_superadmin",
        "/_root/configuration",
        "/_root/dashboard",
        "/_root/profile",
        "/_root/references",
        "/_root/not-authorized"
      ]
    },
    "/_root/_admin": {
      "filePath": "_root/_admin/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/_admin/organization"
      ]
    },
    "/_root/_superadmin": {
      "filePath": "_root/_superadmin/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/_superadmin/organizations",
        "/_root/_superadmin/stations",
        "/_root/_superadmin/system",
        "/_root/_superadmin/users"
      ]
    },
    "/_root/configuration": {
      "filePath": "_root/configuration/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/configuration/"
      ]
    },
    "/_root/dashboard": {
      "filePath": "_root/dashboard/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/dashboard/data-analysis",
        "/_root/dashboard/historical",
        "/_root/dashboard/map",
        "/_root/dashboard/"
      ]
    },
    "/_root/profile": {
      "filePath": "_root/profile/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/profile/edit-profile",
        "/_root/profile/"
      ]
    },
    "/_root/references": {
      "filePath": "_root/references/route.tsx",
      "parent": "/_root",
      "children": [
        "/_root/references/",
        "/_root/references/terminology/heatindex",
        "/_root/references/terminology/rainfall",
        "/_root/references/terminology/uvindex",
        "/_root/references/terminology/windspeed"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx"
    },
    "/_root/not-authorized": {
      "filePath": "_root/not-authorized.tsx",
      "parent": "/_root"
    },
    "/_root/_admin/organization": {
      "filePath": "_root/_admin/organization/route.tsx",
      "parent": "/_root/_admin",
      "children": [
        "/_root/_admin/organization/"
      ]
    },
    "/_root/_superadmin/organizations": {
      "filePath": "_root/_superadmin/organizations/route.tsx",
      "parent": "/_root/_superadmin",
      "children": [
        "/_root/_superadmin/organizations/create",
        "/_root/_superadmin/organizations/"
      ]
    },
    "/_root/_superadmin/stations": {
      "filePath": "_root/_superadmin/stations/route.tsx",
      "parent": "/_root/_superadmin",
      "children": [
        "/_root/_superadmin/stations/create",
        "/_root/_superadmin/stations/root-certificate",
        "/_root/_superadmin/stations/",
        "/_root/_superadmin/stations/device-certification/$id"
      ]
    },
    "/_root/_superadmin/system": {
      "filePath": "_root/_superadmin/system/route.tsx",
      "parent": "/_root/_superadmin",
      "children": [
        "/_root/_superadmin/system/"
      ]
    },
    "/_root/_superadmin/users": {
      "filePath": "_root/_superadmin/users/route.tsx",
      "parent": "/_root/_superadmin",
      "children": [
        "/_root/_superadmin/users/create",
        "/_root/_superadmin/users/"
      ]
    },
    "/_root/dashboard/data-analysis": {
      "filePath": "_root/dashboard/data-analysis.tsx",
      "parent": "/_root/dashboard"
    },
    "/_root/dashboard/historical": {
      "filePath": "_root/dashboard/historical.tsx",
      "parent": "/_root/dashboard"
    },
    "/_root/dashboard/map": {
      "filePath": "_root/dashboard/map.tsx",
      "parent": "/_root/dashboard"
    },
    "/_root/profile/edit-profile": {
      "filePath": "_root/profile/edit-profile.tsx",
      "parent": "/_root/profile"
    },
    "/_root/configuration/": {
      "filePath": "_root/configuration/index.tsx",
      "parent": "/_root/configuration"
    },
    "/_root/dashboard/": {
      "filePath": "_root/dashboard/index.tsx",
      "parent": "/_root/dashboard"
    },
    "/_root/profile/": {
      "filePath": "_root/profile/index.tsx",
      "parent": "/_root/profile"
    },
    "/_root/references/": {
      "filePath": "_root/references/index.tsx",
      "parent": "/_root/references"
    },
    "/_root/_superadmin/organizations/create": {
      "filePath": "_root/_superadmin/organizations/create.tsx",
      "parent": "/_root/_superadmin/organizations"
    },
    "/_root/_superadmin/stations/create": {
      "filePath": "_root/_superadmin/stations/create.tsx",
      "parent": "/_root/_superadmin/stations"
    },
    "/_root/_superadmin/stations/root-certificate": {
      "filePath": "_root/_superadmin/stations/root-certificate.tsx",
      "parent": "/_root/_superadmin/stations"
    },
    "/_root/_superadmin/users/create": {
      "filePath": "_root/_superadmin/users/create.tsx",
      "parent": "/_root/_superadmin/users"
    },
    "/_root/references/terminology/heatindex": {
      "filePath": "_root/references/terminology/heatindex.tsx",
      "parent": "/_root/references"
    },
    "/_root/references/terminology/rainfall": {
      "filePath": "_root/references/terminology/rainfall.tsx",
      "parent": "/_root/references"
    },
    "/_root/references/terminology/uvindex": {
      "filePath": "_root/references/terminology/uvindex.tsx",
      "parent": "/_root/references"
    },
    "/_root/references/terminology/windspeed": {
      "filePath": "_root/references/terminology/windspeed.tsx",
      "parent": "/_root/references"
    },
    "/_root/_admin/organization/": {
      "filePath": "_root/_admin/organization/index.tsx",
      "parent": "/_root/_admin/organization"
    },
    "/_root/_superadmin/organizations/": {
      "filePath": "_root/_superadmin/organizations/index.tsx",
      "parent": "/_root/_superadmin/organizations"
    },
    "/_root/_superadmin/stations/": {
      "filePath": "_root/_superadmin/stations/index.tsx",
      "parent": "/_root/_superadmin/stations"
    },
    "/_root/_superadmin/system/": {
      "filePath": "_root/_superadmin/system/index.tsx",
      "parent": "/_root/_superadmin/system"
    },
    "/_root/_superadmin/users/": {
      "filePath": "_root/_superadmin/users/index.tsx",
      "parent": "/_root/_superadmin/users"
    },
    "/_root/_superadmin/stations/device-certification/$id": {
      "filePath": "_root/_superadmin/stations/device-certification/$id.tsx",
      "parent": "/_root/_superadmin/stations"
    }
  }
}
ROUTE_MANIFEST_END */
