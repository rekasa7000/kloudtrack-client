/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootRouteImport } from './routes/_root/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as RootUsersIndexImport } from './routes/_root/users/index'
import { Route as RootTenantsIndexImport } from './routes/_root/tenants/index'
import { Route as RootStationsIndexImport } from './routes/_root/stations/index'
import { Route as RootProfileIndexImport } from './routes/_root/profile/index'
import { Route as RootOrganizationIndexImport } from './routes/_root/organization/index'
import { Route as RootMonitoringIndexImport } from './routes/_root/monitoring/index'
import { Route as RootDashboardIndexImport } from './routes/_root/dashboard/index'
import { Route as RootConfigurationIndexImport } from './routes/_root/configuration/index'
import { Route as RootAuditLogsIndexImport } from './routes/_root/audit-logs/index'

// Create/Update Routes

const RootRouteRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const RootUsersIndexRoute = RootUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootTenantsIndexRoute = RootTenantsIndexImport.update({
  id: '/tenants/',
  path: '/tenants/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootStationsIndexRoute = RootStationsIndexImport.update({
  id: '/stations/',
  path: '/stations/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootProfileIndexRoute = RootProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootOrganizationIndexRoute = RootOrganizationIndexImport.update({
  id: '/organization/',
  path: '/organization/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootMonitoringIndexRoute = RootMonitoringIndexImport.update({
  id: '/monitoring/',
  path: '/monitoring/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootDashboardIndexRoute = RootDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootConfigurationIndexRoute = RootConfigurationIndexImport.update({
  id: '/configuration/',
  path: '/configuration/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootAuditLogsIndexRoute = RootAuditLogsIndexImport.update({
  id: '/audit-logs/',
  path: '/audit-logs/',
  getParentRoute: () => RootRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_root/audit-logs/': {
      id: '/_root/audit-logs/'
      path: '/audit-logs'
      fullPath: '/audit-logs'
      preLoaderRoute: typeof RootAuditLogsIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/configuration/': {
      id: '/_root/configuration/'
      path: '/configuration'
      fullPath: '/configuration'
      preLoaderRoute: typeof RootConfigurationIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/dashboard/': {
      id: '/_root/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof RootDashboardIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/monitoring/': {
      id: '/_root/monitoring/'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof RootMonitoringIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/organization/': {
      id: '/_root/organization/'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof RootOrganizationIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/profile/': {
      id: '/_root/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof RootProfileIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/stations/': {
      id: '/_root/stations/'
      path: '/stations'
      fullPath: '/stations'
      preLoaderRoute: typeof RootStationsIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/tenants/': {
      id: '/_root/tenants/'
      path: '/tenants'
      fullPath: '/tenants'
      preLoaderRoute: typeof RootTenantsIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/users/': {
      id: '/_root/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof RootUsersIndexImport
      parentRoute: typeof RootRouteImport
    }
  }
}

// Create and export the route tree

interface RootRouteRouteChildren {
  RootAuditLogsIndexRoute: typeof RootAuditLogsIndexRoute
  RootConfigurationIndexRoute: typeof RootConfigurationIndexRoute
  RootDashboardIndexRoute: typeof RootDashboardIndexRoute
  RootMonitoringIndexRoute: typeof RootMonitoringIndexRoute
  RootOrganizationIndexRoute: typeof RootOrganizationIndexRoute
  RootProfileIndexRoute: typeof RootProfileIndexRoute
  RootStationsIndexRoute: typeof RootStationsIndexRoute
  RootTenantsIndexRoute: typeof RootTenantsIndexRoute
  RootUsersIndexRoute: typeof RootUsersIndexRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootAuditLogsIndexRoute: RootAuditLogsIndexRoute,
  RootConfigurationIndexRoute: RootConfigurationIndexRoute,
  RootDashboardIndexRoute: RootDashboardIndexRoute,
  RootMonitoringIndexRoute: RootMonitoringIndexRoute,
  RootOrganizationIndexRoute: RootOrganizationIndexRoute,
  RootProfileIndexRoute: RootProfileIndexRoute,
  RootStationsIndexRoute: RootStationsIndexRoute,
  RootTenantsIndexRoute: RootTenantsIndexRoute,
  RootUsersIndexRoute: RootUsersIndexRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof RootRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/audit-logs': typeof RootAuditLogsIndexRoute
  '/configuration': typeof RootConfigurationIndexRoute
  '/dashboard': typeof RootDashboardIndexRoute
  '/monitoring': typeof RootMonitoringIndexRoute
  '/organization': typeof RootOrganizationIndexRoute
  '/profile': typeof RootProfileIndexRoute
  '/stations': typeof RootStationsIndexRoute
  '/tenants': typeof RootTenantsIndexRoute
  '/users': typeof RootUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof RootRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/audit-logs': typeof RootAuditLogsIndexRoute
  '/configuration': typeof RootConfigurationIndexRoute
  '/dashboard': typeof RootDashboardIndexRoute
  '/monitoring': typeof RootMonitoringIndexRoute
  '/organization': typeof RootOrganizationIndexRoute
  '/profile': typeof RootProfileIndexRoute
  '/stations': typeof RootStationsIndexRoute
  '/tenants': typeof RootTenantsIndexRoute
  '/users': typeof RootUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_root': typeof RootRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_root/audit-logs/': typeof RootAuditLogsIndexRoute
  '/_root/configuration/': typeof RootConfigurationIndexRoute
  '/_root/dashboard/': typeof RootDashboardIndexRoute
  '/_root/monitoring/': typeof RootMonitoringIndexRoute
  '/_root/organization/': typeof RootOrganizationIndexRoute
  '/_root/profile/': typeof RootProfileIndexRoute
  '/_root/stations/': typeof RootStationsIndexRoute
  '/_root/tenants/': typeof RootTenantsIndexRoute
  '/_root/users/': typeof RootUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/audit-logs'
    | '/configuration'
    | '/dashboard'
    | '/monitoring'
    | '/organization'
    | '/profile'
    | '/stations'
    | '/tenants'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/audit-logs'
    | '/configuration'
    | '/dashboard'
    | '/monitoring'
    | '/organization'
    | '/profile'
    | '/stations'
    | '/tenants'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_root'
    | '/_auth/login'
    | '/_root/audit-logs/'
    | '/_root/configuration/'
    | '/_root/dashboard/'
    | '/_root/monitoring/'
    | '/_root/organization/'
    | '/_root/profile/'
    | '/_root/stations/'
    | '/_root/tenants/'
    | '/_root/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RootRouteRoute: typeof RootRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RootRouteRoute: RootRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_root",
        "/_auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_root": {
      "filePath": "_root/route.tsx",
      "children": [
        "/_root/audit-logs/",
        "/_root/configuration/",
        "/_root/dashboard/",
        "/_root/monitoring/",
        "/_root/organization/",
        "/_root/profile/",
        "/_root/stations/",
        "/_root/tenants/",
        "/_root/users/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx"
    },
    "/_root/audit-logs/": {
      "filePath": "_root/audit-logs/index.tsx",
      "parent": "/_root"
    },
    "/_root/configuration/": {
      "filePath": "_root/configuration/index.tsx",
      "parent": "/_root"
    },
    "/_root/dashboard/": {
      "filePath": "_root/dashboard/index.tsx",
      "parent": "/_root"
    },
    "/_root/monitoring/": {
      "filePath": "_root/monitoring/index.tsx",
      "parent": "/_root"
    },
    "/_root/organization/": {
      "filePath": "_root/organization/index.tsx",
      "parent": "/_root"
    },
    "/_root/profile/": {
      "filePath": "_root/profile/index.tsx",
      "parent": "/_root"
    },
    "/_root/stations/": {
      "filePath": "_root/stations/index.tsx",
      "parent": "/_root"
    },
    "/_root/tenants/": {
      "filePath": "_root/tenants/index.tsx",
      "parent": "/_root"
    },
    "/_root/users/": {
      "filePath": "_root/users/index.tsx",
      "parent": "/_root"
    }
  }
}
ROUTE_MANIFEST_END */
